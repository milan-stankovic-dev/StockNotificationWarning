@using Microsoft.Extensions.Options
@using StockNotificationWarning.Config
@using System.Text.Json
@using StockNotificationWarning.Services.Abstraction
@inject IOptionsMonitor<ShopifyConfig> ShopifyConfig
@inject IShopifyContextService ShopifyContext
@inject IToastNotificationService ToastService
@inject IInventoryMonitorService MonitorService

@{
    // await ShopifyContext.InitializeAsync(Context);
    var apiKey = ShopifyConfig.CurrentValue.ApiKey;
    // var shop = ShopifyContext.Shop ?? "N/A";
    var host = ShopifyContext.Host ?? "N/A";

    await MonitorService.NotifyToastServiceOfUnderstocked();
    var inventoryWarnings = ToastService.GetAllToasts();
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="~/js/toasts.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</head>

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<body data-api-key="@apiKey" data-host="@host">
    @RenderBody()

    <script>
        $(function () {

            @if (inventoryWarnings == null)
            {
                    <text>console.log("⚠️ inventoryWarnings is null");</text>
            }
            else if (!inventoryWarnings.Any())
            {
                    <text>console.log("ℹ️ inventoryWarnings is empty");</text>
            }
            @foreach (var warning in inventoryWarnings)
            {
                    <text>console.log("📦 Inventory warning:", @Html.Raw(JsonSerializer.Serialize(warning)));\n</text>
                    <text>Toast.failure(@Html.Raw(JsonSerializer.Serialize(warning)));</text>
            }
        });
    </script>

    <script type="module">
        import { initApp } from '/js/app-bridge-bundle.js';
        import { getSessionToken } from '/js/app-bridge-bundle.js';

        (async () => {
            const apiKey = document.body.dataset.apiKey;
            const host = document.body.dataset.host;

            const app = await initApp(apiKey, host);
            window.app = app;

            async function fetchUnderstocked() {
                try {
                    const sessionToken = await getSessionToken(app);
                    const response = await fetch('/api/toastwarning', {
                        method: 'GET',
                        headers: {
                            'Authorization': 'Bearer ' + sessionToken,
                            'Accept': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const warnings = await response.json();
                        warnings.forEach(warning => {
                            console.log("📦 Inventory warning:", warning);
                            Toast.failure(warning);
                        });
                    } else {
                        console.error("❌ Fetch failed:", response.status);
                    }
                } catch (err) {
                    console.error("🔥 Error fetching understocked:", err);
                }
            }
            setInterval(fetchUnderstocked, 30000);
        })();
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
